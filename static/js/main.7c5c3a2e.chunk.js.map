{"version":3,"sources":["services/PasswordsService.js","components/Button/Button.jsx","components/Input/Input.jsx","components/PasswordsGenerator/PasswordsGenerator.jsx","components/App/App.jsx","index.js"],"names":["lowerCase","upperCase","this","map","letter","toUpperCase","numbers","specialSymbols","isUpperCase","isLowerCase","isNumbers","isSpecialSymbols","passwordLength","passwordsAmount","error","passwords","passwordsSettings","push","i","password","Math","floor","random","length","Button","children","props","className","Input","PasswordsGenerator","useState","setPasswords","setIsUpperCase","setIsLowerCase","setIsNumbers","setIsSpecialSymbols","setPasswordLength","setPasswordsAmount","setError","generatePasswords","passwordService","Array","isArray","useEffect","index","type","id","checked","onChange","prevState","htmlFor","value","e","target","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c5c3a2e.chunk.js","sourcesContent":["class PasswordsService {\r\n  lowerCase = [\r\n    \"a\",\r\n    \"b\",\r\n    \"c\",\r\n    \"d\",\r\n    \"e\",\r\n    \"f\",\r\n    \"g\",\r\n    \"h\",\r\n    \"i\",\r\n    \"j\",\r\n    \"k\",\r\n    \"l\",\r\n    \"m\",\r\n    \"n\",\r\n    \"o\",\r\n    \"p\",\r\n    \"q\",\r\n    \"r\",\r\n    \"s\",\r\n    \"t\",\r\n    \"u\",\r\n    \"v\",\r\n    \"w\",\r\n    \"x\",\r\n    \"y\",\r\n    \"z\",\r\n  ];\r\n\r\n  upperCase = [...this.lowerCase.map((letter) => letter.toUpperCase())];\r\n\r\n  numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\r\n\r\n  specialSymbols = [\"!\", \"@\", \"#\", \"$\", \"%\", \"&\", \"?\", \"-\", \"+\", \"=\", \"~\"];\r\n\r\n  generatePasswords(\r\n    isUpperCase,\r\n    isLowerCase,\r\n    isNumbers,\r\n    isSpecialSymbols,\r\n    passwordLength,\r\n    passwordsAmount\r\n  ) {\r\n    if (!isUpperCase && !isLowerCase && !isNumbers && !isSpecialSymbols) {\r\n      return { error: \"Настройте пароль\" };\r\n    }\r\n\r\n    if (!+passwordLength) {\r\n      return { error: \"Введите длину пароля\" };\r\n    }\r\n\r\n    if (+passwordLength > 50) {\r\n      return { error: \"Максимальная длина пароля - 50 символов\" };\r\n    }\r\n\r\n    if (!+passwordsAmount) {\r\n      return { error: \"Введите количество паролей\" };\r\n    }\r\n\r\n    if (+passwordsAmount > 5) {\r\n      return { error: \"Максимальная длина количества паролей - 5 штук\" };\r\n    }\r\n\r\n    let passwords = [];\r\n    let passwordsSettings = [];\r\n\r\n    if (isUpperCase) {\r\n      passwordsSettings.push(...this.upperCase);\r\n    }\r\n\r\n    if (isLowerCase) {\r\n      passwordsSettings.push(...this.lowerCase);\r\n    }\r\n\r\n    if (isNumbers) {\r\n      passwordsSettings.push(...this.numbers);\r\n    }\r\n\r\n    if (isSpecialSymbols) {\r\n      passwordsSettings.push(...this.specialSymbols);\r\n    }\r\n\r\n    for (let i = 0; i < passwordsAmount; i++) {\r\n      let password = \"\";\r\n\r\n      for (let i = 0; i < passwordLength; i++) {\r\n        password +=\r\n          passwordsSettings[\r\n            Math.floor(Math.random() * passwordsSettings.length)\r\n          ];\r\n      }\r\n\r\n      passwords.push(password);\r\n    }\r\n\r\n    return passwords;\r\n  }\r\n}\r\n\r\nexport default new PasswordsService();\r\n","import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nconst Button = ({ children, ...props }) => {\r\n  return (\r\n    <button {...props} className=\"Button\">\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./Input.css\";\r\n\r\nconst Input = ({ ...props }) => {\r\n  return <input {...props} className=\"Input\" />;\r\n};\r\n\r\nexport default Input;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport passwordService from \"../../services/PasswordsService\";\r\nimport Button from \"../Button/Button\";\r\nimport Input from \"../Input/Input\";\r\nimport \"./PasswordsGenerator.css\";\r\n\r\nconst PasswordsGenerator = () => {\r\n  const [passwords, setPasswords] = useState([]);\r\n  const [isUpperCase, setIsUpperCase] = useState(true);\r\n  const [isLowerCase, setIsLowerCase] = useState(true);\r\n  const [isNumbers, setIsNumbers] = useState(true);\r\n  const [isSpecialSymbols, setIsSpecialSymbols] = useState(true);\r\n  const [passwordLength, setPasswordLength] = useState(10);\r\n  const [passwordsAmount, setPasswordsAmount] = useState(1);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const generatePasswords = () => {\r\n    const passwords = passwordService.generatePasswords(\r\n      isUpperCase,\r\n      isLowerCase,\r\n      isNumbers,\r\n      isSpecialSymbols,\r\n      passwordLength,\r\n      passwordsAmount\r\n    );\r\n\r\n    if (!Array.isArray(passwords)) {\r\n      setError(passwords.error);\r\n    } else {\r\n      setError(\"\");\r\n    }\r\n\r\n    setPasswords(passwords);\r\n  };\r\n\r\n  useEffect(() => {\r\n    generatePasswords();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"PasswordsGenerator\">\r\n      {!error && (\r\n        <div className=\"PasswordsGenerator__passwords\">\r\n          {passwords?.map((password, index) => (\r\n            <p key={index}>{password}</p>\r\n          ))}\r\n        </div>\r\n      )}\r\n      {error && (\r\n        <div className=\"PasswordsGenerator_error\">\r\n          <p>{error}</p>\r\n        </div>\r\n      )}\r\n      <div className=\"PasswordsGenerator__settings\">\r\n        <h2>Настройки пароля</h2>\r\n        <div className=\"PasswordsGenerator__setting\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"uppercase\"\r\n            checked={isUpperCase}\r\n            onChange={() => setIsUpperCase((prevState) => !prevState)}\r\n          />\r\n          <label htmlFor=\"uppercase\">Заглавные буквы</label>\r\n        </div>\r\n        <div className=\"PasswordsGenerator__setting\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"lowercase\"\r\n            checked={isLowerCase}\r\n            onChange={() => setIsLowerCase((prevState) => !prevState)}\r\n          />\r\n          <label htmlFor=\"lowercase\">Строчные буквы</label>\r\n        </div>\r\n        <div className=\"PasswordsGenerator__setting\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"numbers\"\r\n            checked={isNumbers}\r\n            onChange={() => setIsNumbers((prevState) => !prevState)}\r\n          />\r\n          <label htmlFor=\"numbers\">Цифры</label>\r\n        </div>\r\n        <div className=\"PasswordsGenerator__setting\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"symbols\"\r\n            checked={isSpecialSymbols}\r\n            onChange={() => setIsSpecialSymbols((prevState) => !prevState)}\r\n          />\r\n          <label htmlFor=\"symbols\">Специальные символы</label>\r\n        </div>\r\n        <div className=\"PasswordsGenerator__length\">\r\n          <label htmlFor=\"length\">Длина (макс. 50)</label>\r\n          <Input\r\n            type=\"text\"\r\n            id=\"length\"\r\n            value={passwordLength}\r\n            onChange={(e) => setPasswordLength(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"PasswordsGenerator__amount\">\r\n          <label htmlFor=\"length\">Количество (макс. 5)</label>\r\n          <Input\r\n            type=\"text\"\r\n            id=\"length\"\r\n            value={passwordsAmount}\r\n            onChange={(e) => setPasswordsAmount(e.target.value)}\r\n          />\r\n        </div>\r\n      </div>\r\n      <Button onClick={generatePasswords}>Сгенерировать</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PasswordsGenerator;\r\n","import React from \"react\";\nimport PasswordsGenerator from \"../../components/PasswordsGenerator/PasswordsGenerator\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>Генератор паролей</h1>\n      <PasswordsGenerator />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}